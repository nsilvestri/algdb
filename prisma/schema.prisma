// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  wcaId         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Puzzle {
  id              String        @id
  name            String
  slug            String
  rank            Int
  visualization   Visualization @relation(fields: [visualizationId], references: [id])
  visualizationId String
  sets            Set[]
  cases           Case[]
  methods         Method[]
}

model Set {
  id              String        @id @default(cuid())
  name            String
  slug            String
  puzzle          Puzzle        @relation(fields: [puzzleId], references: [id])
  puzzleId        String
  visualization   Visualization @relation(fields: [visualizationId], references: [id])
  visualizationId String
  cases           Case[]
  methods         Method[]
  methodId        String?
}

model Case {
  id                String              @id @default(cuid())
  name              String
  setup             String
  puzzle            Puzzle              @relation(fields: [puzzleId], references: [id])
  puzzleId          String
  sets              Set[]
  algorithmsForCase AlgorithmsForCase[] // TODO: rename to "algorithms" when that namespace is available
}

model Algorithm {
  id                String              @id @default(cuid())
  moves             String
  algorithmsForCase AlgorithmsForCase[] // TODO: rename to "cases" when Case.algorithms is available
}

model AlgorithmsForCase {
  id          String    @id @default(cuid())
  algorithm   Algorithm @relation(fields: [algorithmId], references: [id])
  algorithmId String
  case        Case      @relation(fields: [caseId], references: [id])
  caseId      String
}

model Visualization {
  id      String   @id @default(cuid())
  type    String
  options Json
  Puzzle  Puzzle[]
  Set     Set[]
  Method  Method[]
}

model Method {
  id              String        @id @default(cuid())
  name            String
  slug            String
  sets            Set[]
  puzzle          Puzzle        @relation(fields: [puzzleId], references: [id])
  puzzleId        String
  visualization   Visualization @relation(fields: [visualizationId], references: [id])
  visualizationId String
}
